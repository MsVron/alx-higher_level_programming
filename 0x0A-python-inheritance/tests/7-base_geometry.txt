The ``7-base_geometry`` module
=============================

Using ``7-base_geometry``
-------------------------

Import the BaseGeometry class:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create an instance of BaseGeometry:
    >>> bg = BaseGeometry()

Test present: area()
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Test present: integer_validator()
    >>> bg.integer_validator("age", 25)

Test present: integer_validator("age")
    >>> try:
    ...     bg.integer_validator("age")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

Test present: integer_validator("age", (4,))
    >>> try:
    ...     bg.integer_validator("age", (4,))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test present: integer_validator("age", [3])
    >>> try:
    ...     bg.integer_validator("age", [3])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test present: integer_validator("age", True)
    >>> try:
    ...     bg.integer_validator("age", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test present: integer_validator("age", {3, 4})
    >>> try:
    ...     bg.integer_validator("age", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer

Test present: integer_validator("age", None)
    >>> try:
    ...     bg.integer_validator("age", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] age must be an integer
